import 'package:animated_splash_screen/animated_splash_screen.dart';import 'package:audioplayers/audioplayers.dart';import 'package:firebase_core/firebase_core.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_local_notifications/flutter_local_notifications.dart';import 'package:get/get_utils/src/platform/platform.dart';import 'package:we_link/homeLayout/home_layout.dart';import 'package:we_link/modules/welcoming/boarding_screen.dart';import 'package:we_link/modules/welcoming/splash.dart';import 'package:we_link/shared/bloc/AppCubit/cubit.dart';import 'package:we_link/shared/bloc/AppCubit/states.dart';import 'package:we_link/shared/bloc/chat_cubit/chat_cubit.dart';import 'package:we_link/shared/bloc/post_cubit/post_cubit.dart';import 'package:we_link/shared/bloc/story_cubit/story_cubit.dart';import 'package:we_link/shared/components/constants.dart';import 'package:we_link/shared/components/sound_assets/asset_names.dart';import 'package:we_link/shared/network/local/bloc_observer.dart';import 'package:we_link/shared/network/local/cache_helper.dart';import 'package:we_link/shared/network/remote/firebase_api.dart';import 'package:we_link/shared/styles/themes.dart';import 'package:we_link/shared/utility/notification_helper.dart';import 'firebase_options.dart';import 'models/notification_body.dart';import 'modules/auth/login_screen.dart';import 'modules/notification_screen.dart';final navigatorKey = GlobalKey<NavigatorState>();final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =    FlutterLocalNotificationsPlugin();Future<void> main() async {  WidgetsFlutterBinding.ensureInitialized();  await Firebase.initializeApp(    options: DefaultFirebaseOptions.currentPlatform,  );  await FirebaseApi().initNotifications();  NotificationBody? body;  try {    if (GetPlatform.isMobile) {      final RemoteMessage? remoteMessage =          await FirebaseMessaging.instance.getInitialMessage();      if (remoteMessage != null) {        body = NotificationHelper.convertNotification(remoteMessage.data);      }      await NotificationHelper.initialize(flutterLocalNotificationsPlugin);      FirebaseMessaging.onBackgroundMessage(myBackgroundMessageHandler);    }  } catch (_) {}  await CacheHelper.init();  bool? lastPage = CacheHelper.getData('lastPage');  uId = CacheHelper.getData('uid');  final Widget stWidget;  AudioCache audioCache = AudioCache();  audioCache.load(sendMessage);  if (lastPage != null) {    if (uId != null) {      stWidget = const HomeLayout();    } else {      stWidget = const LoginScreen();    }  } else {    stWidget = const OnBoardingScreen();  }  Bloc.observer = MyBlocObserver();  runApp(MyApp(    stWidget: stWidget,  ));}class MyApp extends StatelessWidget {  final Widget stWidget;  const MyApp({Key? key, required this.stWidget}) : super(key: key);  @override  Widget build(BuildContext context) {    return MultiBlocProvider(      providers: [        BlocProvider(          create: (context) => AppCubit(AppInitialState())            ..getUserData()        ),        BlocProvider(          create: (context) => PostCubit()..initUser(context),        ),        BlocProvider(          create: (context) => StoryCubit()            ..initUser(context)            ..getStories(),        ),        BlocProvider(          create: (context) => ChatCubit()..initUser(),        ),      ],      child: MaterialApp(        navigatorKey: navigatorKey,        routes: {          "/notification_screen": (context) => const NotificationScreen(),        },        debugShowCheckedModeBanner: false,        theme: lightTheme,        darkTheme: darkTheme,        themeMode: ThemeMode.light,        home: AnimatedSplashScreen(          splashIconSize: 500,          splash: const SplashScreen(),          centered: true,          disableNavigation: false,          nextScreen: stWidget,          backgroundColor: Colors.deepPurple,          animationDuration: const Duration(milliseconds: 1100),          duration: 2000,        ),      ),    );  }}